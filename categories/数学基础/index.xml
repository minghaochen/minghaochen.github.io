<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数学基础 on MH&#39;s Blog</title>
    <link>https://minghaochen.github.io/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 数学基础 on MH&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Feb 2020 13:54:36 +0800</lastBuildDate>
    
	<atom:link href="https://minghaochen.github.io/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>「概率基础」常见概率分布</title>
      <link>https://minghaochen.github.io/post/%E6%A6%82%E7%8E%87%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</link>
      <pubDate>Mon, 10 Feb 2020 13:54:36 +0800</pubDate>
      
      <guid>https://minghaochen.github.io/post/%E6%A6%82%E7%8E%87%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</guid>
      <description>&lt;p&gt;本文主要总结一些基础的概率分布，便于遗忘时查阅。&lt;/p&gt;

&lt;p&gt;从最基础的抛硬币开始吧~&lt;/p&gt;

&lt;p&gt;大家都知道一枚硬币只有正面和反面两种可能情况，用随机变量$X$来表示抛硬币的结果，那么$X$的可能情况为$X=1$（表示正面）或$X=0$（表示反面），&lt;strong&gt;伯努利试验&lt;/strong&gt;也就指抛一次硬币的结果，即&lt;/p&gt;

&lt;p&gt;$$
P(X=k) = p^k(1-p)^{1-k}, k=0,1
$$
其中$p$代表的就是硬币为正面的概率。我们也称$X$满足参数为$p$的伯努利分布，$X\sim Ber(p)$&lt;/p&gt;

&lt;p&gt;到这里我们只抛了一次硬币，那么如果多抛几次呢，那就是&lt;strong&gt;二项分布&lt;/strong&gt;，即独立重复$n$次抛硬币（伯努利试验）。而原来的随机变量$X$表示的就是$n$次试验中正面朝上的次数，因此$X$的可能取值也就是$0,1,&amp;hellip;,n$，出现$k$次正面的概率为&lt;/p&gt;

&lt;p&gt;$$
P(X=k)=C_n^k p^k(1-p)^{n-k}
$$
其中$C_n^k=\frac{n!}{k!(n-k)!}$为二项系数。
我们也称$X$满足参数为$(n,p)$的二项分布$X\sim B(n,p)$， 二项分布具有期望$E[X]=np$和方差$Var[X]=np(1-p)$。&lt;/p&gt;

&lt;p&gt;有人会觉得抛硬币不过瘾，结果就两种情况，想要探索更多的情况我们进入到掷骰子，而且是一个不均匀的筛子，也就是不用面发生的可能性是不一样的，假设各个面发生的概率为$p=[p_1,&amp;hellip;,p_6],\sum p_i=1$，并且引入$X=[X_1,&amp;hellip;,X_6]$来表示各个面的情况，也就是说$X_i$里只有一个是$1$其他都是$0$，比如你筛子是3朝上，那么$X_3=1$，$X_1,X_2,X_4,X_5,X_6$均为$0$。这时候我们就可以表示$X$这个随机向量的概率了：&lt;/p&gt;

&lt;p&gt;$$
P(X|p)=\prod_{i=1}^{6}p_i^{X_i}
$$&lt;/p&gt;

&lt;p&gt;那如果掷骰子$n$次呢，$X=[X_1,&amp;hellip;,X_6]$这时候表示的就是$n$次试验中某个面向上的次数。
我们记第$i$面朝上的次数为$m_i$且满足$\sum m_i=n$，那么这时候$X$满足的就是&lt;strong&gt;多项分布&lt;/strong&gt;：&lt;/p&gt;

&lt;div&gt;
$$
P(X_1=m_1,...,X_6=m_6)=Multi(n; p_1,...,p_6)=\frac{n!}{m_1!...m_6!}\prod_{i=1}^6p_i^{m_i}
$$&lt;/div&gt;

&lt;p&gt;记做$X\sim Multi(n,p)$一句话概括多项分布就是&lt;strong&gt;一个多种可能情况的事件独立发生$n$次，各种可能情况发生次数的联合分布&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;多项分布的统计量满足$E[X_i]=Np_i$，$Var[X_i]=Np_i(1-p_i)$，$Cov(X_i,X_j)=-Np_ip_j$&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>核函数与再生核希尔伯特空间</title>
      <link>https://minghaochen.github.io/post/%E6%A0%B8%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%8D%E7%94%9F%E6%A0%B8%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Thu, 15 Aug 2019 20:59:29 +0800</pubDate>
      
      <guid>https://minghaochen.github.io/post/%E6%A0%B8%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%8D%E7%94%9F%E6%A0%B8%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E7%A9%BA%E9%97%B4/</guid>
      <description>&lt;p&gt;说到核方法，很多人第一反应就是SVM，其实不然，其应用很广，但核心思想均是&lt;strong&gt;用在原始空间计算核函数的值来避免直接求解高维特征空间的内积&lt;/strong&gt;；说到核函数往往还会带上一个吓人的概念“再生核希尔伯特空间”，先揭秘一下什么是希尔伯特空间，希尔伯特空间其实就是&lt;strong&gt;函数空间&lt;/strong&gt;(或者可以把函数理解为无限维的向量)，函数空间里任意一个元素都表示一个函数，而再加上“再生核”这个限定词相当于就是特定的函数空间，就是具有再生性的函数空间，那什么是再生性听我慢慢道来。&lt;/p&gt;

&lt;p&gt;假设有原始空间样本 $x_i \in \mathbb{R}^p, i=1,&amp;hellip;,N$，通常为了&lt;strong&gt;在高维空间寻找线性关系&lt;/strong&gt;我们会将其通过函数映射 $\phi(\cdot)$ 到高维空间 $\phi(x_i) \in \mathbb{R}^n$，但是这样也意味着如果原始空间求内积 $&amp;lt;x_i,x_j&amp;gt;$ 对应到特征空间为 $&amp;lt;\phi(x_i),\phi(x_j)&amp;gt;$，直接求解高维空间的内积计算量是很大的，同时我们可能并不知道这个映射函数 $\phi(\cdot)$ 怎么选择才是合适的。核函数则提供了另一种求解的思路。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;核函数的定义&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$$
\kappa(\cdot,\cdot):\mathbb{R}^p \times \mathbb{R}^p \rightarrow \mathbb{R}
$$&lt;/p&gt;

&lt;p&gt;则特征空间的内积可以表示为&lt;/p&gt;

&lt;p&gt;$$
&amp;lt;\phi(x_i),\phi(x_j)&amp;gt; = \kappa(x_i,x_j)
$$&lt;/p&gt;

&lt;p&gt;此外，特征空间的距离和角度也可以用核函数来表示。&lt;/p&gt;

&lt;p&gt;同时有 Mercer 定理告诉我们怎么样的函数能称为核函数&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;任何正半定函数均可以作为核函数，即由 $\kappa(\cdot,\cdot)$ 构成的核矩阵 $K$ 是正半定的：$a^TKa\ge 0$，其中 $K_{ij} = \kappa(x_i,x_j)$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;这也就说明了只要我们构造出一个正定核(往往是应用现成的)，那么就不需要显式地定义特征空间和映射函数，并且能够利用已有的线性方法来解决非线性问题&lt;/strong&gt;。&lt;strong&gt;同时，核函数还可以理解为用来衡量两个向量的相似度(因为内积可以一定程度反应两个样本之间的相似度)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为核函数可以总结为：&lt;strong&gt;映射、内积、相似度&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;再生核希尔伯特空间的定义&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有了核函数，那么就会至少有一个与之对应的再生核希尔伯特空间 $\mathcal{H}$，它满足&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;固定任意 $x_0$，则 $\kappa(\cdot,x_0):\mathbb{R^p} \rightarrow \mathbb{R}$ (这是个函数！) 属于 $\mathcal{H}$ (这是个函数空间！)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再生性：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;$$
\begin{aligned}
&lt;\kappa(\cdot,x),f&gt; &amp;= f(x),f \in \mathcal{H} \\
&lt;\kappa(\cdot,x),\kappa(\cdot,z)&gt; &amp;= \kappa(x,z) = \kappa(z,x)
\end{aligned}
$$&lt;/div&gt;

&lt;p&gt;给定核函数如何确定映射以及对应的希尔伯特空间？&lt;/p&gt;

&lt;p&gt;定义再生核map $\Phi:\mathbb{R}^p \rightarrow \mathbb{R}^{\mathbb{R}^p}$ 且 $\Phi(z)=\kappa(\cdot,z)$，相当于将 $z\in \mathbb{R}^p$ 映射成一个函数 $\kappa(\cdot,z):\mathbb{R}^p \rightarrow \mathbb{R}$，则&lt;/p&gt;

&lt;p&gt;$$
\kappa(x,z) = &amp;lt;\kappa(\cdot,x),\kappa(\cdot,z)&amp;gt;=&amp;lt;\Phi(x),\Phi(z)&amp;gt;
$$&lt;/p&gt;

&lt;p&gt;即通过核函数可以找到对应的映射，而对应的希尔伯特空间可以表示为由 $\Phi(\cdot)$ 组成的向量空间。&lt;/p&gt;

&lt;p&gt;给定映射关系如何确定核函数？&lt;/p&gt;

&lt;p&gt;直接令 $\kappa(x,z) = &amp;lt;\Phi(x),\Phi(z)&amp;gt;$，然后验证 Mercer 定理即可。&lt;/p&gt;

&lt;h2 id=&#34;各种空间的定义补充&#34;&gt;各种空间的定义补充&lt;/h2&gt;

&lt;p&gt;各种空间之间的关系其实有点&lt;strong&gt;从抽象到具体的过程&lt;/strong&gt;。我们给空间&lt;strong&gt;赋予一些属性或者制定一些规则&lt;/strong&gt;就能得到特定的空间。&lt;/p&gt;

&lt;p&gt;比如大家熟悉的&lt;strong&gt;向量空间&lt;/strong&gt;，那就是满足加减法和数乘的空间，很好理解，空间内任意元素都可以用一组基通过加减和数乘(线性组合)表示。&lt;/p&gt;

&lt;p&gt;比如赋予距离的空间称为&lt;strong&gt;度量空间&lt;/strong&gt;，定义距离时需要遵守三条公理：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;非负性，同一性：距离都是非负的，自己到自己的距离当然是 0 了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对称性：你走向我的距离等于我走向你的距离&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;三角不等式：你从 A 走到 B 在走到 C 的距离肯定大于等于直接从 A 到 C 的距离&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如赋予范数的空间称为&lt;strong&gt;赋范空间&lt;/strong&gt;，范数可以理解为一个元素到 0 的距离，同时它比距离的定义&lt;strong&gt;更具体了一步&lt;/strong&gt;，因为它还需要额外满足&lt;/p&gt;

&lt;p&gt;$$
||ax|| = |a| \times||x||
$$&lt;/p&gt;

&lt;p&gt;那么我们在定义了范数后自然能用范数来定义距离了，比如 $d(x,y) = ||x-y||$，但是不能用距离来定义范数哦，因为&lt;strong&gt;波霸奶茶是奶茶，但不是所有奶茶都叫波霸奶茶&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有了范数来定义距离了有时候还不够，我们有时候会需要&lt;strong&gt;角度&lt;/strong&gt;信息，这时候就&lt;strong&gt;再给波霸奶茶加点料&lt;/strong&gt;，于是赋予了内积的向量空间称为&lt;strong&gt;内积空间&lt;/strong&gt;，定义内积需要遵守三条公理：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对称性&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第一元素线性：
$$&amp;lt;ax,y&amp;gt;=a&amp;lt;x,y&amp;gt;,&amp;lt;x+y,z&amp;gt;=&amp;lt;x,z&amp;gt;+&amp;lt;y,z&amp;gt;$$ 这不就是向量空间的数乘和加减运算嘛&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;正定性&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么定义了内积后自然也能用&lt;strong&gt;加了仙草的波霸奶茶来定义波霸奶茶&lt;/strong&gt;(用内积来定义范数)，比如&lt;/p&gt;

&lt;p&gt;$$||x||=\sqrt{&amp;lt;x,x&amp;gt;}$$&lt;/p&gt;

&lt;p&gt;还有个比较难以描述的&lt;strong&gt;完备空间&lt;/strong&gt;，可以理解为极限操作不会跑出自己的空间就称为完备的，&lt;strong&gt;奶茶只要三分糖，太甜了就超出能承受的甜度极限了呗&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;有了这么一步步的具体化后，&lt;strong&gt;希尔伯特空间&lt;/strong&gt;就可以出来了，它就是&lt;strong&gt;一杯三分糖的加了仙草的波霸奶茶&lt;/strong&gt;，呸，它就是&lt;strong&gt;一个完备的内积空间&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;总结来说：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;赋范线性空间就是赋予了范数的向量空间，也是度量空间（具有线性结构的度量空间）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;内积空间是赋范线性空间&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;希尔伯特空间就是完备的内积空间，同时需要注意的是希尔伯特空间中的元素一般是函数，一个函数可以视为一个无穷维的向量。如果大家熟悉傅里叶变换或者泰勒展开，便能自然的想到这个空间的基底是什么。没错，也是一组无限多的函数。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>对偶理论</title>
      <link>https://minghaochen.github.io/post/%E5%AF%B9%E5%81%B6%E7%90%86%E8%AE%BA/</link>
      <pubDate>Sun, 11 Aug 2019 21:59:22 +0800</pubDate>
      
      <guid>https://minghaochen.github.io/post/%E5%AF%B9%E5%81%B6%E7%90%86%E8%AE%BA/</guid>
      <description>&lt;p&gt;在求解一个优化命题时，如果其对偶形式便于求解，常常可以通过求解对偶问题来避免直接对原问题进行求解。比如机器学习中典型的SVM就涉及到对偶理论，以及拉格朗日乘子法、KKT条件等概念。&lt;/p&gt;

&lt;p&gt;首先简单通俗地说说这几个概念是干嘛的&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对偶理论：对偶也就是孪生双胞胎，一个优化命题也就有其对应的兄弟优化命题。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;拉格朗日函数：将原本优化命题的目标函数和约束整合成一个函数。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;KKT条件：函数的最优值满足的性质。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的解释可能不够准确，但希望对这些概念有个初步的认识，接下来从优化命题的角度来解释一下这些东西。&lt;/p&gt;

&lt;p&gt;首先是原问题&lt;/p&gt;

&lt;div&gt;$$
\begin{aligned} \min _{x \in R^{n}} f_0(x) &amp; \\ \text { s.t. } f_{i}(x) \leq 0, i &amp;=1,2, \ldots, k \\ h_{j}(x)=0, j &amp;=1,2, \ldots, l \end{aligned}
$$&lt;/div&gt;

&lt;p&gt;这个优化命题说的是你有个函数 $f_0(x)$，它的自变量是 $x$，维度为 $n$，你想要求这个函数的最小值，同时这个自变量(优化里又叫决策变量)还需要满足 $k$ 个不等式约束 $f_i(x) \le 0$ 以及 $l$ 个等式约束 $h_j(x) = 0$。假设满足这些约束的情况下这个函数的最小值为 $p^*$。&lt;/p&gt;

&lt;p&gt;如果是个无约束的求极值问题，高中时我们就学过，求导并令导函数为 $0$ 便能求出函数取得极值时对应的自变量 $x^*$。 但是这里是有约束的优化问题，显然直接求导的方法不再适用，那自然的想法就是把约束去掉，拉格朗日函数就是通过将约束&lt;strong&gt;线性组合&lt;/strong&gt;放入目标函数而形成的新的一个函数：&lt;/p&gt;

&lt;p&gt;$$
L(x,\lambda,v) = f_0(x) + \sum_{i=1}^k \lambda_i f_i(x) + \sum_{j=1}^l v_j h_j(x)
$$
这里 $L(x,\lambda,v)$ 是个三元函数 $R^n \times R^k \times R^l \rightarrow R$，且 $\lambda \ge 0,v$ 称为拉格朗日向量，至于这个系数 $\lambda$ 为什么还需要满足 $\lambda \ge 0$，你先记住这是为了&lt;strong&gt;确保下界&lt;/strong&gt;，后面会详细解释。&lt;/p&gt;

&lt;h2 id=&#34;原问题的等价形式&#34;&gt;原问题的等价形式&lt;/h2&gt;

&lt;p&gt;我们原来是要求函数 $f_0(x)$ 关于 $x$ 的最小值，为了不考虑原问题的约束而构造了拉格朗日函数 $L(x,\lambda,v)$。我们先将其看作是 $\lambda,v$ 的函数，然后定义函数：&lt;/p&gt;

&lt;p&gt;$$
q(x) = \max_{\lambda \ge 0,v } L(x,\lambda,v)
$$&lt;/p&gt;

&lt;p&gt;可以证明 $\min_{x\in R^{n}}q(x)$ 与原问题等价，即满足&lt;/p&gt;

&lt;div&gt;$$
p^* = \min_{x\in R^{n}}q(x) = \min_{x\in R^{n}}\max_{\lambda \ge 0,v}L(x,\lambda,v)
$$&lt;/div&gt;

&lt;p&gt;这个证明很简单，我们只需要分类讨论一下这个&lt;strong&gt;无约束问题中原问题约束是否成立&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$x$ 满足原问题约束，则 $q(x) = f_0(x)$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$x$ 不满足原问题约束，即 $f_i(x) \ge 0$ 或 $h_j(x) \not= 0$，则 $q(x) = + \infty$&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此 $\min_{x}q(x) = \min_{x}f_0(x)$ 且 $x$ &lt;strong&gt;满足原问题约束&lt;/strong&gt;，即 $\min_{x\in R^{n}}q(x)$  &lt;strong&gt;等价于原问题。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;拉格朗日对偶函数&#34;&gt;拉格朗日对偶函数&lt;/h2&gt;

&lt;p&gt;先前我们把拉格朗日函数看作是 $\lambda,v$ 的函数，现在我们将其看作是关于 $x$ 的函数，定义拉格朗日对偶函数，这只是个名字，其实就是 $L(x,\lambda,v)$ 关于 $x$ 的下界(或者理解为最小值)：&lt;/p&gt;

&lt;p&gt;$$
g(\lambda,v) = \min_{x \in R^{n} } L(x,\lambda,v)
$$&lt;/p&gt;

&lt;p&gt;拉格朗日对偶函数 $g(\lambda,v)$ 有两个重要的性质：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这是个凹函数(这里不证明了，感兴趣的可以自查)&lt;/li&gt;
&lt;li&gt;$g(\lambda,v)\le p^*$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;性质2是重点！我们来证明一下，假设 $\tilde{x}$ 是原问题的可行解，说明 $\tilde{x}$ 满足原问题的不等式约束以及等式约束，将其带入 $L(x,\lambda,v)$ 中，有&lt;/p&gt;

&lt;p&gt;$$
L(\tilde{x},\lambda,v) = f_0(\tilde{x}) + \sum_{i=1}^k \lambda_i f_i(\tilde{x}) + \sum_{j=1}^l v_j h_j(\tilde{x})
$$&lt;/p&gt;

&lt;p&gt;根据 $g(\lambda,v)$ 的定义有&lt;/p&gt;

&lt;p&gt;$$
g(\lambda,v) = \min_{x} L(x,\lambda,v) \le L(\tilde{x},\lambda,v) = f_0(\tilde{x}) + \sum_{i=1}^k \lambda_i f_i(\tilde{x})
$$&lt;/p&gt;

&lt;p&gt;$\min_{x} L(x,\lambda,v) \le L(\tilde{x},\lambda,v)$ 是因为函数的(最小值)下界肯定小于可行解代入的值呀！&lt;/p&gt;

&lt;p&gt;我们知道 $\tilde{x}$ 是原问题的可行解也意味着 $f_i(x) \le 0$，进一步，如果 $\lambda_i \ge 0$ 会发生什么？也就是 $\lambda_i f_i(x) \le 0$，那么
$$
g(\lambda,v) \le f_0(\tilde{x}) + \sum_{i=1}^k \lambda_i f_i(\tilde{x}) \le f_0(\tilde{x})
$$
也就是 $g(\lambda,v) \le f_0(\tilde{x})$，这是对任意可行解 $\tilde{x}$ 都成立的，那么对函数取得最小值的 $x^*$ 对应的函数值 $p^*$ 也成立。即&lt;/p&gt;

&lt;p&gt;$$
g(\lambda,v) \le p^*
$$
这也就得到了性质2，可以理解为&lt;strong&gt;我们为原问题的最优值 $p^*$ 找到了一个下界函数 $g(\lambda,v)$，为了确保下界需要满足我们之前的假设 $\lambda \ge 0$，而对 $v$ 的取值则是任意的。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;原问题的对偶形式&#34;&gt;原问题的对偶形式&lt;/h2&gt;

&lt;p&gt;前面的分析中我们看到原问题的最优值有一个函数下界，那么如果我们来优化这个函数下界，让它来逼近原问题的最优值，是不是为求解原问题提供了另一种思路呢？这就是所谓的&lt;strong&gt;对偶问题&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;$$
\begin{aligned} d^* =\max _{\lambda \ge 0,v} g(\lambda,v) = \max _{\lambda \ge 0,v} \min _{x \in R^n} L(x,\lambda,v)
\end{aligned}
$$&lt;/div&gt;

&lt;p&gt;这个优化命题相当于最大化原问题的下界函数，其中 $d^*$ 为优化命题的最优值，约束 $\lambda \ge 0 $ 是用来确保下界的。根据 $g(\lambda,v)$ 是凹函数这一性质可知，这个最大化凹函数的优化问题是个&lt;strong&gt;凸问题&lt;/strong&gt;，凸问题也就意味着便于求解，&lt;strong&gt;因此无论原问题的凹凸性如何，都可以转化为对偶问题然后通过求解这个凸问题来得到原问题的下界，甚至原问题的最优解&lt;/strong&gt;。什么时候这个下界函数的最大值等于原问题的最优解呢？这就是下面要讨论的问题。&lt;/p&gt;

&lt;h3 id=&#34;强对偶性与弱对偶性&#34;&gt;强对偶性与弱对偶性&lt;/h3&gt;

&lt;p&gt;我们已知知道 $g(\lambda,v)$ 是原函数最小值 $p^*$ 的下界，那么说明 $g(\lambda,v)$ 的最大值也需要满足&lt;/p&gt;

&lt;p&gt;$$
d^* \le p^*
$$&lt;/p&gt;

&lt;p&gt;这就是弱对偶性了，很自然就满足了，那么强对偶性从名字听就比较强，自然要求要严格一点，不能只是取 $\le$ 号，而是直接取等号，即&lt;/p&gt;

&lt;p&gt;$$
d^* = p^*
$$&lt;/p&gt;

&lt;p&gt;对于弱对偶，我们能够通过求解原问题的对偶问题得到原问题最小值的下界，而如果满足强对偶性，我们直接就得到原问题的最优解了！意味着&lt;strong&gt;我们能够通过求解对偶问题来避免直接求解原问题同时获得原问题的最优函数值&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;强对偶性&#34;&gt;强对偶性&lt;/h3&gt;

&lt;p&gt;如何才能判断原问题是否满足强对偶性呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;凸问题通常but not always满足强对偶性&lt;/strong&gt;
也就是说凸问题中有部分满足强对偶性，那对这些部分约束一下就是slater条件：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;存在 $x$ 严格可行：$f_i(x) &amp;lt; 0,i=1,&amp;hellip;,k$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当不等式约束为仿射函数时，这个条件可以弱化为&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;存在 $x$ 满足部分严格可行：$f_i(x) \le 0,i=1,&amp;hellip;,m;f_i(x) &amp;lt; 0,i=m+1,&amp;hellip;,k$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么有
$$
\text{凸问题} + \text{Slater条件} = \text{强对偶性}
$$&lt;/p&gt;

&lt;p&gt;进一步探究一下当原问题满足强对偶性时，原问题和对偶问题的最优解满足哪些性质，首先从 $p^* = d^*$ 看起，利用函数的表达式描述这一关系有：&lt;/p&gt;

&lt;div&gt;$$
\begin{aligned}
f_0(x^*) &amp;= g(\lambda^*,v^*)\\
&amp;= \min_x (f_0(x) + \sum_{i=1}^k \lambda_i^* f_i(x) + \sum_{j=1}^l v_j^* h_j(x))\\
&amp;\le f_0(x^*) + \sum_{i=1}^k \lambda_i^* f_i(x^*) + \sum_{j=1}^l v_j^* h_j(x^*)\\
&amp;\le f_0(x^*)
\end{aligned}   
$$&lt;/div&gt;

&lt;p&gt;第一行到第二行是根据 $g(\lambda,v)$ 的函数定义，第二行到第三行是根据函数的下界小于 $x$ 取任意值对应的函数值，这里 $x = x^*$，第三行到第四行是根据 $x^*$ 满足原问题的约束条件 $f_i(x) \le 0, h_j(x) =0$。所以&lt;strong&gt;不等号同时取等号&lt;/strong&gt;，并可以得出以下两条结论：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;极值条件：$x^*$ 是使 $L(x,\lambda^*,v^*)$ 取得下界的点，即 $x^*$ 是使 $\nabla_x L(x,\lambda^*,v^*) = 0$ 的点&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;松弛互补条件：$\sum_{i=1}^k \lambda_i^*f_i(x^*)=0$&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;kkt条件&#34;&gt;KKT条件&lt;/h3&gt;

&lt;p&gt;KKT也就是原问题和对偶问题的最优点 $x^*,\lambda^*,v^*$ 满足的几个条件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;原问题的约束条件：$f_i(x^*) \le 0,h_j(x^*)=0$&lt;/li&gt;
&lt;li&gt;对偶问题的约束条件：$\lambda_i^* \ge 0$&lt;/li&gt;
&lt;li&gt;松弛互补条件：$\sum_{i=1}^k \lambda_i^*f_i(x^*)=0$&lt;/li&gt;
&lt;li&gt;极值条件：
$\nabla_x f_0(x^*) + \sum_{i=1}^k \lambda_i^* \nabla_x f_i(x^*) + \sum_{j=1}^l v_j^* \nabla_x h_j(x^*) = 0$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;如果原问题是凸问题，则KKT条件为充要条件，也就是说满足KKT条件的点也就是原问题和对偶问题的最优解，那就能够在满足KKT条件下用求解对偶问题来替代求解原问题，使得问题求解更加容易。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chol分解与SVD分解</title>
      <link>https://minghaochen.github.io/post/chol%E5%88%86%E8%A7%A3%E4%B8%8Esvd%E5%88%86%E8%A7%A3/</link>
      <pubDate>Thu, 25 Jul 2019 15:27:09 +0800</pubDate>
      
      <guid>https://minghaochen.github.io/post/chol%E5%88%86%E8%A7%A3%E4%B8%8Esvd%E5%88%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;今天说说两个整天见却整天忘的矩阵分解，一个是Chol分解，一个是SVD分解&lt;/p&gt;

&lt;h1 id=&#34;chol分解&#34;&gt;Chol分解&lt;/h1&gt;

&lt;p&gt;对于Chol分解，首先要知道它针对的对象是什么，也就是&lt;strong&gt;埃尔米特矩阵（Hermitian matrix）&lt;/strong&gt;，听着有点难懂，其实就是共轭对称矩阵，再简单点说，我们常见的实对称矩阵就是埃尔米特矩阵的特例。&lt;/p&gt;

&lt;p&gt;那么这个Chol分解分解得到的是什么东西？是干嘛用的呢？
我们先来回答第一个问题，Chol分解是将一个矩阵分解成两个矩阵的乘积，即
$$
A = LL^*
$$
其中，$L$ 是一个&lt;strong&gt;下三角&lt;/strong&gt;矩阵，$L^*$ 是 $L$ 的共轭转置，如果实数那就是转置（i.e., $L^T$）&lt;/p&gt;

&lt;p&gt;分解成这个玩意干嘛用的呢？目前了解到的比较常用的两个地方&lt;/p&gt;

&lt;h2 id=&#34;1-解线性方程呗-比如-ax-b&#34;&gt;1. 解线性方程呗，比如 $Ax=b$&lt;/h2&gt;

&lt;p&gt;你可能会说直接目测方程的解就是 $x = A^{-1}b$，还需要什么Chol分解？如果矩阵 $A$ 是病态的（条件数很大），那么问题就来了，我们在用计算机求解这类问题的时候出现舍入误差可能会导致所答非所问。&lt;/p&gt;

&lt;p&gt;如果对矩阵进行Chol分解再来求解方程呢，原方程需要两步求解&lt;/p&gt;

&lt;p&gt;Step1
$$
Ly=b
$$
Step2
$$
L^Tx=y
$$
打开Matlab感受一下？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;A = [5,7;7,10];
cond(A)
L = chol(A)&amp;#39;;
cond(L)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看出分解后求解的两个方程都是良态的且只需储存矩阵的下三角部分即可咯。&lt;/p&gt;

&lt;h2 id=&#34;2-求矩阵的行列式&#34;&gt;2. 求矩阵的行列式&lt;/h2&gt;

&lt;p&gt;既然Chol分解把矩阵分解成下三角阵，那么求解原矩阵的行列式自然非常容易了&lt;/p&gt;

&lt;div&gt;$$
\begin{aligned} \operatorname{det} {A} &amp;=\prod_{i=1}^{n} {L}_{i i}^{2} \\ \log \operatorname{det} {A} &amp;=2 \sum_{i=1}^{n} \log {L}_{i i} \end{aligned}
$$&lt;/div&gt;

&lt;p&gt;其中 ${L}_{i i}$ 为矩阵的对角元素。&lt;/p&gt;

&lt;h1 id=&#34;svd分解&#34;&gt;SVD分解&lt;/h1&gt;

&lt;p&gt;要说SVD分解，首先要提到特征根分解，线代学过吧？忘记了没关系，我们再来复习一下。&lt;/p&gt;

&lt;p&gt;首先还是要知道特征值分解的对象是什么，答案是&lt;strong&gt;方阵&lt;/strong&gt;，对于方阵 $A$，有&lt;/p&gt;

&lt;p&gt;$$
Av=\lambda v
$$&lt;/p&gt;

&lt;p&gt;这时，$v$ 就称为特征向量，$\lambda$ 就是与之对应的特征值。&lt;/p&gt;

&lt;p&gt;那么这个特征值分解分解得到的是什么东西？是干嘛用的呢？&lt;/p&gt;

&lt;p&gt;通过特征值分解，可以把矩阵 $A$ 分解为&lt;/p&gt;

&lt;p&gt;$$
A = Q\Sigma Q^{-1}
$$&lt;/p&gt;

&lt;p&gt;其中 $Q$ 就是特征向量组成的矩阵，$\Sigma$ 就是对角线为对应特征值的对角阵。&lt;/p&gt;

&lt;p&gt;这样分解有什么用呢？我们知道矩阵的本质就是线性变换，那么分解后我不就知道&lt;strong&gt;变换方向的主次&lt;/strong&gt;了，因为我们分解得到的 $\Sigma$ 是一个对角阵且特征值从大到小排列，而特征值所对应的特征向量也就是描述矩阵的变化方向，所以 $Q$ 矩阵就是&lt;strong&gt;按照主要变化到次要变化进行排列&lt;/strong&gt;。那么我们就可以根据自己的需要选择特定个数的变化方向来近似原始矩阵变化，也就是&lt;strong&gt;提取原始矩阵中我们期望的主要特征&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;那么这些和今天的猪脚SVD有什么联系呢？（哪有猪脚，肚肚饿）&lt;/p&gt;

&lt;p&gt;关系可大了，你可以粗糙地把SVD也当做是特征值分解，虽然不太准确。上面说到特征值分解针对的是&lt;strong&gt;方阵&lt;/strong&gt;，可是哪来那么多的方阵啊！遇到非方阵时特征值分解不就GG了，这时候SVD出场了。&lt;/p&gt;

&lt;p&gt;一句话概括SVD是适用&lt;strong&gt;任意&lt;/strong&gt;，是&lt;strong&gt;任意&lt;/strong&gt;矩阵的一种分解方法：&lt;/p&gt;

&lt;p&gt;&lt;div&gt;$$
A_{m \times n} = U_{m \times m} \Sigma_{m \times n}V_{n \times n}^T
$$&lt;div&gt;&lt;/p&gt;

&lt;p&gt;那么奇异值和特征值是怎么对应起来的呢？由于矩阵 $A$ 不一定是方阵，我们乘以它的转置就能得到方阵，那么就能特征值分解了。&lt;/p&gt;

&lt;p&gt;$$
(A^TA)v_i = \lambda_iv_i
$$&lt;/p&gt;

&lt;p&gt;这样求得的 $v_i$ 就组成了SVD中的右奇异矩阵 $V$，此外&lt;/p&gt;

&lt;p&gt;$$
\sigma_i=\sqrt{\lambda_i},u_i=Av_i/\sigma_i
$$&lt;/p&gt;

&lt;p&gt;这里的 $\sigma_i$ 就是所谓的奇异值，它在矩阵 $\Sigma$ 中也是从大到小排列的，而且&lt;strong&gt;减小速度非常快！&lt;/strong&gt;，这可是个好消息，说明我们利用&lt;strong&gt;很少的奇异值就能近似描述原始矩阵&lt;/strong&gt;，相当于是&lt;strong&gt;空间压缩&lt;/strong&gt;，比如我们利用 $r$ 个奇异值来近似原始矩阵（$r$ 远小于 $m$ 或 $n$）&lt;/p&gt;

&lt;p&gt;$$
A_{m \times n} = U_{m \times r} \Sigma_{r \times r}V_{r \times n}^T
$$&lt;/p&gt;

&lt;p&gt;所以总的来说SVD就是用来提取重要特征的一个方法。SVD或者特征值分解的具体实现都有现成的函数可以调用，感兴趣可以通过matlab分解一把再观察一下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;[Q,Sigma1] = eig(A&amp;#39;*A)   % matlab求特征值不一定按从小到大排序的 
[U,Sigma2,V] = svd(A)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;观察一下 $Q$ 和 $V$ 的关系以及 $Sigma1$ 和 $Sigma2$ 的关系，可以再根据上面给出的公式人工计算一下 $U$ 矩阵，再和matlab的结果进行比较。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>